__author__ = 'ericfournier'


import re
import sys
import os
import yaml
from Bio import SeqIO
from Bio.SeqRecord import SeqRecord
import subprocess
from Bio.SeqUtils import GC

SpecList=open("SpecList", "r").read().split("\n")
SpecList.remove("")
for spec in SpecList:
    os.system("mkdir Sequences/{}".format(spec))
    os.system("mv Sequences/{0}.fasta Sequences/{0}".format(spec))
    os.system("mkdir Sequences/{}/Filtered".format(spec))


class FastaManager():
    """
    This class manage multi fasta files generated by Spades assembler
    """
    def __init__(self,yamlFile,project,run,assembler,concat,*param):

        '''read yaml file'''
        self.myYamFile=""

        self.projectDir=project+"/"

        self.runDir="run_"+run+"/"

        self.assemDir=assembler+"/"

        '''contig concatenation'''
        self.contigConcat=concat

        '''number of parameters in param (1 or 2). Length threshold always first parameter and coverage is optional'''
        self.LenParam=2

        '''length threshold'''
        self.lengthT=500

        if self.LenParam>1:
            '''the optional coverage threshold'''
            self.covT=5
        else:
            self.covT=0

        self.ParseYamlFile()

        '''if concatenation of the filtered multifasta in simple fasta file'''
        if self.contigConcat:
            '''filter the multi fasta input'''
            map(self.ContigFilter,self.SpecList)
            '''concatenate the filter multi fasta'''
            map(self.MultiToSimple,self.SpecList)
        else:
            '''filter the multi fasta input'''
            map(self.ContigFilter,self.SpecList)

    def ParseYamlFile(self):
        """
        parse the yaml file
        """

        '''list of specimen id'''
        self.SpecList=open("SpecList", "r").read().split("\n")
        self.SpecList.remove("")

        '''number of specimen'''
        self.NbSpec=len(self.SpecList)


    '''filtration of the input Spades assembly file'''
    def ContigFilter(self,spec):
            spec=str(spec)

            '''to allow a contig tranfert in the filter file'''
            TransferSignal=False

            '''create the filter file'''
            with open("Sequences/{0}/Filtered/{0}_KeepOver_500pb_and_5x.fasta".format(spec),'w') as wf:

                with open("Sequences/{0}/{0}.fasta".format(spec)) as fileIn:
                    for line in fileIn:
                        if re.search(r'>',line):

                            TransferSignal=False
                            '''check if we accept the contig base on the input parameter'''
                            if self.ParseHeader(line):
                                wf.write(line)
                                TransferSignal=True

                        elif TransferSignal:
                            wf.write(line)
                fileIn.close()
            wf.close()

    '''check if we accept the contig based on the input parameter'''
    def ParseHeader(self,line):
        HeaderPattern=re.search(r'NODE_\d+_length_(\d+)_cov_(\d+)',line)

        if self.LenParam >1:

            if int(HeaderPattern.group(1)) >= self.lengthT and int(HeaderPattern.group(2))>=self.covT:
                return True
        else:
            if int(HeaderPattern.group(1)) > self.lengthT:
                return True


    def TestParam(self,match_contig):
        line_format=re.search(r'^\S+\t\d+\t(\d+)\t\d+\t\d+\t(\d+)',match_contig)

        if int(line_format.group(1)) > self.lengthT and int(line_format.group(2)) > self.covT:
            return True
        else:
            return False


if __name__ == "__main__":
    '''the input yaml file'''
    ListSpecYaml=""

    project=""

    run=""

    assembler=""

    concat="False"

    if concat=="False":
        concat=False
    else:
        concat=True

    LengthThreshold=500

    CoverageThreshold=5

    if CoverageThreshold <=1:
        myFastaManager=FastaManager(ListSpecYaml,project,run,assembler,concat,LengthThreshold)
    else:
        myFastaManager=FastaManager(ListSpecYaml,project,run,assembler,concat,LengthThreshold,CoverageThreshold)
